version: '3.5'
services:
    postgres-db-items:
        image: postgres:11 # prebuilt image from https://hub.docker.com/_/postgres
        restart: always
        environment: # environment variables
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: soaapidb
        user: postgres # the OS user we use to run the commands (for the healthcheck probes)
        volumes:
            - db-items-data:/var/lib/postgresql/data
        ports:
            - 5432:5432
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready" ]
            start_period: 5s
            interval: 10s
            timeout: 5s
            retries: 5

    items-api:
        build: # instead of specifying an image, we build the image using the Dockerfile
            context: ./items-service
            dockerfile: Dockerfile
        restart: always
        # environment variables
        environment:
            DB_HOST: postgres-db-items
            DB_PORT: 5432
            DB_USER: postgres
            DB_PASSWORD: postgres
            DB_NAME: soaapidb
            API_ROOT_PATH: "/items"
            NOTIFICATIONS_SERVICE_URL: "http://notifications-api:8000"
        depends_on:
            postgres-db-items:
                condition: service_healthy
        healthcheck:
            test: "curl --fail http://localhost:8000/healthcheck || exit 1"
            start_period: 5s
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            mode: replicated
            replicas: 2

    postgres-db-notifications:
        image: postgres:11 # prebuilt image from https://hub.docker.com/_/postgres
        restart: always
        environment: # environment variables
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: soaapidb
        user: postgres # the OS user we use to run the commands (for the healthcheck probes)
        volumes:
            - db-notifications-data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready" ]
            start_period: 5s
            interval: 10s
            timeout: 5s
            retries: 5

    notifications-api:
        build: # instead of specifying an image, we build the image using the Dockerfile
            context: ./notifications-service
            dockerfile: Dockerfile
        restart: always
        # environment variables
        environment:
            DB_HOST: postgres-db-notifications
            DB_PORT: 5432
            DB_USER: postgres
            DB_PASSWORD: postgres
            DB_NAME: soaapidb
            API_ROOT_PATH: "/notifications"
        depends_on:
            postgres-db-notifications:
                condition: service_healthy
        healthcheck:
            test: "curl --fail http://localhost:8000/healthcheck || exit 1"
            start_period: 5s
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            mode: replicated
            replicas: 2

    nginx-proxy:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        # name for the image built with ./nginx/Dockerfile
        image: nginx-server-image
        # custom container name for the proxy container
        container_name: nginx-proxy
        ports:
            - 5002:5000
        environment:
            NGINX_SERVER_PORT: 5000
            ITEMS_API_HOST: items-api
            ITEMS_API_PORT: 8000
            NOTIFICATIONS_API_HOST: notifications-api
            NOTIFICATIONS_API_PORT: 8000
        depends_on:
            items-api:
                condition: service_healthy
            notifications-api:
                condition: service_healthy

    cron-service:
        build:
            context: ./cron-service
            dockerfile: Dockerfile
        environment:
            NOTIFICATIONS_SERVICE_URL: "http://notifications-api:8000"
        depends_on:
            items-api:
                condition: service_healthy
            notifications-api:
                condition: service_healthy

volumes:
    db-items-data:
        driver: local
    db-notifications-data:
        driver: local